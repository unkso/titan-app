// tslint:disable
/**
 * Titan
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfRequired, encodeURI } from '../runtime';
import {
    AddOrganizationUserFields,
    AddUserExcuseFields,
    AuthWoltlabFields,
    ChainOfCommand,
    CreateOrganizationFields,
    DeleteOrganizationUserFields,
    EventType,
    InlineResponse200,
    InlineResponse2001,
    Organization,
    OrganizationRoleWithAssoc,
    ReorderOrganizationRolesFields,
    ReportWithAssoc,
    UpdateOrganizationRole,
    UserEventExcuseWithAssoc,
    UserFileEntryType,
    UserFileEntryWithAssoc,
    UserOrganizationMembership,
    UserProfile,
} from '../models';

export interface DeleteOrganizationUserRequest {
    orgId: number;
    deleteOrganizationUserFields: DeleteOrganizationUserFields;
}

export interface GetEventsEventTypesEventTypeIdRequest {
    eventTypeId: number;
}

export interface GetOrganizationsFileEntriesRequest {
    organizations: string;
    fromStartDate: number;
    toStartDate: number;
}

export interface GetOrganizationsIdRequest {
    id: number;
}

export interface GetOrganizationsIdUsersRequest {
    id: number;
    children?: boolean;
}

export interface GetOrganizationsOrgIdChildrenRequest {
    orgId: number;
}

export interface GetOrganizationsOrgIdCocRequest {
    orgId: number;
}

export interface GetOrganizationsOrgIdReportsRequest {
    orgId: number;
}

export interface GetOrganizationsOrgIdRolesRequest {
    orgId: number;
    scope: number;
}

export interface GetOrganizationsOrgIdRolesUnrankedRequest {
    orgId: number;
}

export interface GetOrganizationsOrgIdUsersUserIdCocRequest {
    orgId: number;
    userId: number;
}

export interface GetOrganizationsRolesRoleIdParentRequest {
    roleId: number;
}

export interface GetOrganizationsSlugRequest {
    slug: number;
}

export interface GetUsersRequest {
    username?: string;
    limit?: number;
}

export interface GetUsersIdOrganizationsRequest {
    id: number;
    member?: boolean;
    role?: boolean;
}

export interface GetUsersUserIdExcusesRequest {
    userId: number;
}

export interface GetUsersUserIdFileEntriesRequest {
    userId: number;
}

export interface PostAuthWoltlabRequest {
    authWoltlabFields: AuthWoltlabFields;
}

export interface PostOrganizationsOrgIdReportsRequest {
    orgId: number;
    createOrganizationFields: CreateOrganizationFields;
}

export interface PostOrganizationsOrgIdReportsReportIdAckRequest {
    orgId: number;
    reportId: number;
}

export interface PostOrganizationsOrgIdRolesRequest {
    orgId: number;
    updateOrganizationRole?: UpdateOrganizationRole;
}

export interface PostOrganizationsOrgIdRolesReorderRequest {
    orgId: number;
    reorderOrganizationRolesFields: ReorderOrganizationRolesFields;
}

export interface PostOrganizationsOrgIdRolesRoleIdRequest {
    orgId: number;
    roleId: number;
    updateOrganizationRole?: UpdateOrganizationRole;
}

export interface PostOrganizationsOrgIdUsersRequest {
    orgId: number;
    addOrganizationUserFields: AddOrganizationUserFields;
}

export interface PostUsersUserIdExcusesRequest {
    userId: number;
    addUserExcuseFields: AddUserExcuseFields;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     * remove_user
     */
    deleteOrganizationUser = (requestParameters: DeleteOrganizationUserRequest): Observable<void> => {
        throwIfRequired(requestParameters, 'orgId', 'deleteOrganizationUser');
        throwIfRequired(requestParameters, 'deleteOrganizationUserFields', 'deleteOrganizationUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<void>({
            path: '/api/organizations/{org_id}/users'.replace('{org_id}', encodeURI(requestParameters.orgId)),
            method: 'DELETE',
            headers,
            body: requestParameters.deleteOrganizationUserFields,
        });
    };

    /**
     * list_event_types
     */
    getEventsEventTypes = (): Observable<Array<EventType>> => {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Array<EventType>>({
            path: '/api/events/event-types',
            method: 'GET',
            headers,
        });
    };

    /**
     * get_event_type_by_id
     */
    getEventsEventTypesEventTypeId = (requestParameters: GetEventsEventTypesEventTypeIdRequest): Observable<EventType> => {
        throwIfRequired(requestParameters, 'eventTypeId', 'getEventsEventTypesEventTypeId');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<EventType>({
            path: '/api/events/event-types/{event_type_id}'.replace('{event_type_id}', encodeURI(requestParameters.eventTypeId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * list_organizations
     */
    getOrganizations = (): Observable<Array<Organization>> => {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Array<Organization>>({
            path: '/api/organizations',
            method: 'GET',
            headers,
        });
    };

    /**
     * list_organization_user_file_entries
     */
    getOrganizationsFileEntries = (requestParameters: GetOrganizationsFileEntriesRequest): Observable<Array<UserFileEntryWithAssoc>> => {
        throwIfRequired(requestParameters, 'organizations', 'getOrganizationsFileEntries');
        throwIfRequired(requestParameters, 'fromStartDate', 'getOrganizationsFileEntries');
        throwIfRequired(requestParameters, 'toStartDate', 'getOrganizationsFileEntries');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        const query: HttpQuery = {
            ...(requestParameters.organizations && { 'organizations': requestParameters.organizations }),
            ...(requestParameters.fromStartDate && { 'from_start_date': requestParameters.fromStartDate }),
            ...(requestParameters.toStartDate && { 'to_start_date': requestParameters.toStartDate }),
        };

        return this.request<Array<UserFileEntryWithAssoc>>({
            path: '/api/organizations/file-entries',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * get_organization_by_id
     */
    getOrganizationsId = (requestParameters: GetOrganizationsIdRequest): Observable<Organization> => {
        throwIfRequired(requestParameters, 'id', 'getOrganizationsId');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Organization>({
            path: '/api/organizations/{id}'.replace('{id}', encodeURI(requestParameters.id)),
            method: 'GET',
            headers,
        });
    };

    /**
     * get_organization_users
     */
    getOrganizationsIdUsers = (requestParameters: GetOrganizationsIdUsersRequest): Observable<Array<UserProfile>> => {
        throwIfRequired(requestParameters, 'id', 'getOrganizationsIdUsers');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        const query: HttpQuery = {
            ...(requestParameters.children && { 'children': requestParameters.children }),
        };

        return this.request<Array<UserProfile>>({
            path: '/api/organizations/{id}/users'.replace('{id}', encodeURI(requestParameters.id)),
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * get_child_organizations
     */
    getOrganizationsOrgIdChildren = (requestParameters: GetOrganizationsOrgIdChildrenRequest): Observable<Array<Organization>> => {
        throwIfRequired(requestParameters, 'orgId', 'getOrganizationsOrgIdChildren');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Array<Organization>>({
            path: '/api/organizations/{org_id}/children'.replace('{org_id}', encodeURI(requestParameters.orgId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * get_organization_coc
     */
    getOrganizationsOrgIdCoc = (requestParameters: GetOrganizationsOrgIdCocRequest): Observable<ChainOfCommand> => {
        throwIfRequired(requestParameters, 'orgId', 'getOrganizationsOrgIdCoc');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<ChainOfCommand>({
            path: '/api/organizations/{org_id}/coc'.replace('{org_id}', encodeURI(requestParameters.orgId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * list_organization_reports
     */
    getOrganizationsOrgIdReports = (requestParameters: GetOrganizationsOrgIdReportsRequest): Observable<Array<ReportWithAssoc>> => {
        throwIfRequired(requestParameters, 'orgId', 'getOrganizationsOrgIdReports');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Array<ReportWithAssoc>>({
            path: '/api/organizations/{org_id}/reports'.replace('{org_id}', encodeURI(requestParameters.orgId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * list_organization_roles
     */
    getOrganizationsOrgIdRoles = (requestParameters: GetOrganizationsOrgIdRolesRequest): Observable<Array<OrganizationRoleWithAssoc>> => {
        throwIfRequired(requestParameters, 'orgId', 'getOrganizationsOrgIdRoles');
        throwIfRequired(requestParameters, 'scope', 'getOrganizationsOrgIdRoles');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        const query: HttpQuery = {
            ...(requestParameters.scope && { 'scope': requestParameters.scope }),
        };

        return this.request<Array<OrganizationRoleWithAssoc>>({
            path: '/api/organizations/{org_id}/roles'.replace('{org_id}', encodeURI(requestParameters.orgId)),
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * get_organization_unranked_roles
     */
    getOrganizationsOrgIdRolesUnranked = (requestParameters: GetOrganizationsOrgIdRolesUnrankedRequest): Observable<Array<OrganizationRoleWithAssoc>> => {
        throwIfRequired(requestParameters, 'orgId', 'getOrganizationsOrgIdRolesUnranked');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Array<OrganizationRoleWithAssoc>>({
            path: '/api/organizations/{org_id}/roles/unranked'.replace('{org_id}', encodeURI(requestParameters.orgId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * get_organization_user_coc
     */
    getOrganizationsOrgIdUsersUserIdCoc = (requestParameters: GetOrganizationsOrgIdUsersUserIdCocRequest): Observable<ChainOfCommand> => {
        throwIfRequired(requestParameters, 'orgId', 'getOrganizationsOrgIdUsersUserIdCoc');
        throwIfRequired(requestParameters, 'userId', 'getOrganizationsOrgIdUsersUserIdCoc');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<ChainOfCommand>({
            path: '/api/organizations/{org_id}/users/{user_id}/coc'.replace('{org_id}', encodeURI(requestParameters.orgId)).replace('{user_id}', encodeURI(requestParameters.userId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * get_all_unacknowledged_reports
     */
    getOrganizationsReportsUnacknowledged = (): Observable<Array<ReportWithAssoc>> => {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Array<ReportWithAssoc>>({
            path: '/api/organizations/reports/unacknowledged',
            method: 'GET',
            headers,
        });
    };

    /**
     * get_parent_role
     */
    getOrganizationsRolesRoleIdParent = (requestParameters: GetOrganizationsRolesRoleIdParentRequest): Observable<OrganizationRoleWithAssoc> => {
        throwIfRequired(requestParameters, 'roleId', 'getOrganizationsRolesRoleIdParent');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<OrganizationRoleWithAssoc>({
            path: '/api/organizations/roles/{role_id}/parent'.replace('{role_id}', encodeURI(requestParameters.roleId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * get_organization_by_slug
     */
    getOrganizationsSlug = (requestParameters: GetOrganizationsSlugRequest): Observable<Organization> => {
        throwIfRequired(requestParameters, 'slug', 'getOrganizationsSlug');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Organization>({
            path: '/api/organizations/{slug}'.replace('{slug}', encodeURI(requestParameters.slug)),
            method: 'GET',
            headers,
        });
    };

    /**
     * list_users
     */
    getUsers = (requestParameters: GetUsersRequest): Observable<Array<UserProfile>> => {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        const query: HttpQuery = {
            ...(requestParameters.username && { 'username': requestParameters.username }),
            ...(requestParameters.limit && { 'limit': requestParameters.limit }),
        };

        return this.request<Array<UserProfile>>({
            path: '/api/users',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * list_unacknowledged_excuses
     */
    getUsersExcusesUnacknowledged = (): Observable<Array<UserEventExcuseWithAssoc>> => {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Array<UserEventExcuseWithAssoc>>({
            path: '/api/users/excuses/unacknowledged',
            method: 'GET',
            headers,
        });
    };

    /**
     * list_user_file_entry_types
     */
    getUsersFileEntryTypes = (): Observable<Array<UserFileEntryType>> => {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Array<UserFileEntryType>>({
            path: '/api/users/file-entry-types',
            method: 'GET',
            headers,
        });
    };

    /**
     * get_user_organizations
     */
    getUsersIdOrganizations = (requestParameters: GetUsersIdOrganizationsRequest): Observable<Array<UserOrganizationMembership>> => {
        throwIfRequired(requestParameters, 'id', 'getUsersIdOrganizations');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        const query: HttpQuery = {
            ...(requestParameters.member && { 'member': requestParameters.member }),
            ...(requestParameters.role && { 'role': requestParameters.role }),
        };

        return this.request<Array<UserOrganizationMembership>>({
            path: '/api/users/{id}/organizations'.replace('{id}', encodeURI(requestParameters.id)),
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * list_user_event_excuses
     */
    getUsersUserIdExcuses = (requestParameters: GetUsersUserIdExcusesRequest): Observable<Array<UserEventExcuseWithAssoc>> => {
        throwIfRequired(requestParameters, 'userId', 'getUsersUserIdExcuses');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Array<UserEventExcuseWithAssoc>>({
            path: '/api/users/{user_id}/excuses'.replace('{user_id}', encodeURI(requestParameters.userId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * list_user_file_entries
     */
    getUsersUserIdFileEntries = (requestParameters: GetUsersUserIdFileEntriesRequest): Observable<Array<UserFileEntryWithAssoc>> => {
        throwIfRequired(requestParameters, 'userId', 'getUsersUserIdFileEntries');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<Array<UserFileEntryWithAssoc>>({
            path: '/api/users/{user_id}/file-entries'.replace('{user_id}', encodeURI(requestParameters.userId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * woltlab
     */
    postAuthWoltlab = (requestParameters: PostAuthWoltlabRequest): Observable<InlineResponse200> => {
        throwIfRequired(requestParameters, 'authWoltlabFields', 'postAuthWoltlab');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<InlineResponse200>({
            path: '/api/auth/woltlab',
            method: 'POST',
            headers,
            body: requestParameters.authWoltlabFields,
        });
    };

    /**
     * create_organization_report
     */
    postOrganizationsOrgIdReports = (requestParameters: PostOrganizationsOrgIdReportsRequest): Observable<ReportWithAssoc> => {
        throwIfRequired(requestParameters, 'orgId', 'postOrganizationsOrgIdReports');
        throwIfRequired(requestParameters, 'createOrganizationFields', 'postOrganizationsOrgIdReports');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<ReportWithAssoc>({
            path: '/api/organizations/{org_id}/reports'.replace('{org_id}', encodeURI(requestParameters.orgId)),
            method: 'POST',
            headers,
            body: requestParameters.createOrganizationFields,
        });
    };

    /**
     * ack_organization_report
     */
    postOrganizationsOrgIdReportsReportIdAck = (requestParameters: PostOrganizationsOrgIdReportsReportIdAckRequest): Observable<ReportWithAssoc> => {
        throwIfRequired(requestParameters, 'orgId', 'postOrganizationsOrgIdReportsReportIdAck');
        throwIfRequired(requestParameters, 'reportId', 'postOrganizationsOrgIdReportsReportIdAck');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<ReportWithAssoc>({
            path: '/api/organizations/{org_id}/reports/{report_id}/ack'.replace('{org_id}', encodeURI(requestParameters.orgId)).replace('{report_id}', encodeURI(requestParameters.reportId)),
            method: 'POST',
            headers,
        });
    };

    /**
     * create_organization_role
     */
    postOrganizationsOrgIdRoles = (requestParameters: PostOrganizationsOrgIdRolesRequest): Observable<OrganizationRoleWithAssoc> => {
        throwIfRequired(requestParameters, 'orgId', 'postOrganizationsOrgIdRoles');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<OrganizationRoleWithAssoc>({
            path: '/api/organizations/{org_id}/roles'.replace('{org_id}', encodeURI(requestParameters.orgId)),
            method: 'POST',
            headers,
            body: requestParameters.updateOrganizationRole,
        });
    };

    /**
     * reorder_roles
     */
    postOrganizationsOrgIdRolesReorder = (requestParameters: PostOrganizationsOrgIdRolesReorderRequest): Observable<void> => {
        throwIfRequired(requestParameters, 'orgId', 'postOrganizationsOrgIdRolesReorder');
        throwIfRequired(requestParameters, 'reorderOrganizationRolesFields', 'postOrganizationsOrgIdRolesReorder');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<void>({
            path: '/api/organizations/{org_id}/roles:reorder'.replace('{org_id}', encodeURI(requestParameters.orgId)),
            method: 'POST',
            headers,
            body: requestParameters.reorderOrganizationRolesFields,
        });
    };

    /**
     * update_organization_role_fields
     */
    postOrganizationsOrgIdRolesRoleId = (requestParameters: PostOrganizationsOrgIdRolesRoleIdRequest): Observable<OrganizationRoleWithAssoc> => {
        throwIfRequired(requestParameters, 'orgId', 'postOrganizationsOrgIdRolesRoleId');
        throwIfRequired(requestParameters, 'roleId', 'postOrganizationsOrgIdRolesRoleId');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<OrganizationRoleWithAssoc>({
            path: '/api/organizations/{org_id}/roles/{role_id}'.replace('{org_id}', encodeURI(requestParameters.orgId)).replace('{role_id}', encodeURI(requestParameters.roleId)),
            method: 'POST',
            headers,
            body: requestParameters.updateOrganizationRole,
        });
    };

    /**
     * add_user
     */
    postOrganizationsOrgIdUsers = (requestParameters: PostOrganizationsOrgIdUsersRequest): Observable<boolean> => {
        throwIfRequired(requestParameters, 'orgId', 'postOrganizationsOrgIdUsers');
        throwIfRequired(requestParameters, 'addOrganizationUserFields', 'postOrganizationsOrgIdUsers');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<boolean>({
            path: '/api/organizations/{org_id}/users'.replace('{org_id}', encodeURI(requestParameters.orgId)),
            method: 'POST',
            headers,
            body: requestParameters.addOrganizationUserFields,
        });
    };

    /**
     * save_user_event_excuse
     */
    postUsersUserIdExcuses = (requestParameters: PostUsersUserIdExcusesRequest): Observable<InlineResponse2001> => {
        throwIfRequired(requestParameters, 'userId', 'postUsersUserIdExcuses');
        throwIfRequired(requestParameters, 'addUserExcuseFields', 'postUsersUserIdExcuses');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'API Key': this.configuration.apiKey('API Key') }), // x-api-key authentication
        };

        return this.request<InlineResponse2001>({
            path: '/api/users/{user_id}/excuses'.replace('{user_id}', encodeURI(requestParameters.userId)),
            method: 'POST',
            headers,
            body: requestParameters.addUserExcuseFields,
        });
    };

}
